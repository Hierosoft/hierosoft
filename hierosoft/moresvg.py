"""
Support Tk versions below 8.7 (alpha June 18, 2021)
that don't have SVG (such as in Python 2 or
some copies of Python 3 included with early macs).

Why not use <https://github.com/TkinterEP/python-tksvg/tree/master>:
- Requires a C module (disadvantage due to cross-platform issues
  and potentiall requiring Dev Tools to install on mac)


Node's public members:
'appendChild', 'attributes', 'childNodes', 'cloneNode', 'firstChild',
'getAttribute', 'getAttributeNS', 'getAttributeNode',
'getAttributeNodeNS', 'getElementsByTagName', 'getElementsByTagNameNS',
'getInterface', 'getUserData', 'hasAttribute', 'hasAttributeNS',
'hasAttributes', 'hasChildNodes', 'insertBefore', 'isSameNode',
'isSupported', 'lastChild', 'localName', 'namespaceURI', 'nextSibling',
'nodeName', 'nodeType', 'nodeValue', 'normalize', 'ownerDocument',
'parentNode', 'prefix', 'previousSibling', 'removeAttribute',
'removeAttributeNS', 'removeAttributeNode', 'removeAttributeNodeNS',
'removeChild', 'replaceChild', 'schemaType', 'setAttribute',
'setAttributeNS', 'setAttributeNode', 'setAttributeNodeNS',
'setIdAttribute', 'setIdAttributeNS', 'setIdAttributeNode',
'setUserData', 'tagName', 'toprettyxml', 'toxml', 'unlink', 'writexml'

Attr (node.attributes[x])'s public members:
'appendChild', 'attributes', 'childNodes', 'cloneNode', 'firstChild',
'getInterface', 'getUserData', 'hasChildNodes', 'insertBefore', 'isId',
'isSameNode', 'isSupported', 'lastChild', 'localName', 'name',
'namespaceURI', 'nextSibling', 'nodeName', 'nodeType', 'nodeValue',
'normalize', 'ownerDocument', 'ownerElement', 'parentNode', 'prefix',
'previousSibling', 'removeChild', 'replaceChild', 'schemaType',
'setUserData', 'specified', 'toprettyxml', 'toxml', 'unlink', 'value'
"""
from __future__ import print_function
from __future__ import division  # workarounds are used, but import to be sure
import sys
from pprint import pformat
from xml.dom.minidom import (
    # parse,  # accepts a file handle
    parseString,
    # Node,  # such as to access static members
    Text,
)


def echo0(*args, **kwargs):
    print(*args, **kwargs, file=sys.stderr)


# from xml.etree import ElementTree


def str_to_viewBox(viewBoxStr):
    """Convert svg_node.attributes['viewBox'].value to float list.

    Returns:
        list[float]: left, top, width, height
    """
    viewBox = viewBoxStr.split()
    if len(viewBox) != 4:
        raise ValueError("viewBox must be 4 floats")
    for i, value in enumerate(viewBox):
        viewBox[i] = float(value)
    return viewBox


class MoreSVG:
    """Process SVG data.

    This could almost be non-OO neatly except prev_x and prev_y may be used by
    relative (lowercase) SVG commands even when starting new path node.
    """
    def __init__(self):
        self.prev_x = None
        self.prev_y = None

    def _draw_svg_path(self, node, canvas, viewBox=None, fill=None,
                       constrain=None, pos=None):
        """Draw a single path node (where node.tagName is "path").

        Example with attributes:
        ```XML
        <path
        id="path1001"
        fill="none"
        stroke="black"
        stroke-width="1"
        d="M 170.00,25.15            C 170.00,25.15 226.00,25.15 226.00,25.15
        226.00,25.15 334.00,25.15 334.00,25.15
        . . . Z"
        style="stroke-width:0.60471994;stroke-dasharray:none;
        stroke:none;fill:#ffffff;fill-opacity:1" />
        ```
        where ". . ." could be any number of coordinates, but some may be
        arguments for a letter command:

        - MoveTo: M, m
        - LineTo: L, l, H, h, V, v
        - Cubic Bezier Curve: C, c, S, s
        - Quadratic Bezier Curve: Q, q, T, t
        - Elliptical Arc Curve: A, a
        - ClosePath: Z, z
        -<developer.mozilla.org/en-US/docs/Web/SVG/Attribute/d#path_commands>

        Spec:

        For further documentation see draw_svg.

        Args:
            node (xml.dom.minidom.Node): A path node.
            viewBox (Iterable[float]): (left, top, width, height)
                The viewBox will be snapped to the constrained dimension
                (see constrain) of the canvas if there is a viewBox. If
                there is no viewBox, the locations in the SVG file will
                be taken literally. Either way, the canvas should be the
                shape of the viewBox or path(s) to avoid paths being
                cropped, unless constrain is set appropriately.
                This is usually generated by _draw_svg_root.
            fill (string): A Tk-compatible string such as "black" or
                "white". Defaults to node.attributes.get('fill') if
                available as per SVG spec, otherwise black (default in
                SVG spec).
        """
        prefix = "[_draw_svg_path] "
        if node.tagName != "path":
            raise ValueError("This function can only draw a path node.")
        parts = node.attributes['d'].value.split()
        # prev_x & prev_y need to be preserved from path to path for relative
        constraints = ["width", "height"]
        if constrain is None:
            pass
            # constrain = "width"
        elif constrain not in constraints:
            raise ValueError('Constrain must be one of %s but is %s'
                             % (constraints, constrain))
        if viewBox is not None:
            if len(viewBox) != 4:
                raise ValueError("viewBox must be 4 floats")
            for i, value in enumerate(viewBox):
                if not isinstance(value, float):
                    echo0("Warning: viewBox should be float for speed")
                    viewBox[i] = float(value)
        if pos is not None:
            if len(pos) != 2:
                raise ValueError("pos must be 2 in length (x, y)")
            for coord in pos:
                if coord != int(coord):
                    raise ValueError("pos must be 2 integers (x, y), but was"
                                     % pos)
        x = None
        y = None
        segments = []  # buffer, buffer, buffer
        buffer = []  # x1,y1,x2,y2,...
        if fill is None:
            fill = node.attributes.get('fill')
            if fill:
                # Get str from Attr
                fill = fill.value
                echo0(prefix+"using fill=%s" % fill)
        if fill is None:
            fill = "black"  # Black is default according to SVG spec
            echo0("Warning: no fill in path node, defaulting to %s" % fill)
        command = None
        relative = False
        for index in range(0, len(parts)):
            part = parts[index]
            coords = part.split(",")
            if command:
                command_lower = command.lower()
                relative = command == command_lower
                if len(coords) != 2:
                    echo0("Warning: command %s after %s"
                          % (part, command))
                    command = part
                    continue
                elif command_lower == "z":
                    # Close the shape (lowercase is relative, but that
                    #   doesn't change the behavior of Z).
                    if len(buffer) < 1:
                        echo0("Error in SVG: closed before start")
                    else:
                        buffer.append(buffer[0])
                        buffer.append(buffer[1])
                        self.prev_x = buffer[0]
                        self.prev_y = buffer[1]
                    continue
                # else use the coord (fall through)
                #   and execute the command using the coord
            elif len(coords) != 2:
                command = part
                # Such as M C Z m c z in that order
                continue
            x = float(coords[0])
            y = float(coords[1])
            if command:
                # ^ If lowercase,
                if command_lower == "m":
                    # Move means start a new segment,
                    #   and usually is first element.
                    if len(buffer) > 0:
                        segments.append(buffer)
                    buffer = []
                else:
                    # TODO: more SVG commands
                    # h: horizonal line (takes one value, not coords)
                    # v: vertical line (takes one value, not coords)
                    # l: Lineto (takes *two* space-separated x and y)
                    echo0("Warning: not a coord pair nor implemented command:"
                          " %s" % command)
                command = None

            if relative:
                if self.prev_x is None:
                    raise ValueError(
                        "Error in SVG syntax: %s in relative mode"
                        "before any points (command=%s)"
                        % (pformat(coords), command)
                    )
                x = self.prev_x + x
                y = self.prev_y + y
            self.prev_x = x
            self.prev_y = y
            if pos:
                x += pos[0]
                y += pos[1]
            buffer.append(x)
            buffer.append(y)
        if len(buffer) > 0:
            echo0("Warning, unterminated segment")
            segments.append(buffer)
        for buffer in segments:
            # NOTE: cyclic must be handled in the SVG itself
            #   (Z or z means draw line to start)
            # TODO: use node.attributes.get('stroke') (string such as "black")
            canvas.create_line(*buffer, fill=fill, smooth=1)

    def _draw_svg_root(self, root, canvas, constrain=None, pos=None):
        """Draw a Node assuming it is the svg root node.

        For documentation see draw_svg.
        """
        viewBoxAttr = root.attributes['viewBox']
        # echo0("Attr has: %s" % dir(viewBoxAttr))  # See module dostring
        viewBox = str_to_viewBox(viewBoxAttr.value)
        # for node in root.getElementsByTagName("path"):
        path_count = 0
        for node in root.childNodes:
            # ^ root.childNodes: may be Text object
            # if node.nodeType != Node.ELEMENT_NODE:
            #     continue
            if isinstance(node, Text):
                # has no attribute tagName
                pass
            elif node.tagName == "sodipodi:namedview":
                pass
            elif node.tagName == "defs":
                pass
            elif node.tagName == "path":
                path_count += 1
                self._draw_svg_path(
                    node,
                    canvas,
                    viewBox=viewBox,
                    constrain=constrain,
                    pos=pos,
                )
            else:
                echo0("Warning: unknown tag: %s" % node.tagName)
        if path_count < 1:
            echo0("Warning: 0 paths.")

    def draw_svg(self, data, canvas, constrain=None, pos=None):
        """Draw svg to canvas manually

        This method exists since it doesn't require Tk 8.7 (in alpha 2021).

        Args:
            data (bytes): svg data
            canvas (tk.Canvas): A Canvas or canvas-like object with at
                least .winfo_width(), .winfo_height(), and .create_line().
            constrain (string): "width" or "height" fit the image to
                width or height. This requires viewBox to be set in the
                SVG, otherwise constrain is ignored.
            pos (Iterable[int]): Position (in Canvas units, usually pixels)
                where the path should be drawn.
        """
        dom = parseString(data)
        done = False
        for root in dom.childNodes:
            # usually just one
            # print("node has: %s" % dir(root))  # See module dostring
            if done:
                echo0("Warning got extra %s" % root.tagName)
            else:
                echo0("Using %s" % root.tagName)
            self._draw_svg_root(
                root,
                canvas,
                constrain=constrain,
                pos=pos,
            )
            done = True
